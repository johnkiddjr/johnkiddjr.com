# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

variables:
  API_IMAGE_TAG: $CI_REGISTRY/$CI_PROJECT_PATH/johnkiddjrcomapi:latest
  UI_IMAGE_TAG: $CI_REGISTRY/$CI_PROJECT_PATH/johnkiddjrcomui:latest

stages:
- build
- test
- publish
- containerize
- deploy
- notify

build dotnet:
  stage: build
  image: $DOTNET_BUILD
  script:
    - dotnet restore
    - dotnet build -c Release --no-restore

build vue:
  stage: build
  image: $NODE_BUILD
  script:
    - cd ui
    - npm ci
    - npm run build

dotnet test:
  stage: test
  image: $DOTNET_BUILD
  script:
    - dotnet restore
    - dotnet test -v n --no-restore

sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml

publish vue for qa:
  stage: publish
  image: $NODE_BUILD
  # only:
  #   - develop
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  script:
    - cd ui
    - npm ci
    # do variable replacements here
    - npm run build

publish vue for prod:
  stage: publish
  image: $NODE_BUILD
  only:
    - tags
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  script:
    - cd ui
    - npm ci
    # do variable replacements here
    - npm run build

publish dotnet for qa:
  stage: publish
  image: $DOTNET_BUILD
  # only:
  #   - develop
  artifacts:
    paths:
      - publish/
    expire_in: 1 week
  script:
    # do appsettings replacements here
    - dotnet restore
    - dotnet publish -c Release -o ./publish $PROJECT_CSPROJ --no-restore

publish dotnet for prod:
  stage: publish
  image: $DOTNET_BUILD
  only:
    - tags
  artifacts:
    paths:
      - publish/
    expire_in: 1 week
  script:
    # do appsettings replacements here
    - dotnet restore
    - dotnet publish -c Release -o ./publish $PROJECT_CSPROJ --no-restore

containerize dotnet:
  stage: containerize
  image: $DOCKER_DIND
  services:
    - docker:dind
  only:
    - develop
    - tags
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $API_IMAGE_TAG .
    - docker push $API_IMAGE_TAG

containerize vue:
  stage: containerize
  image: $DOCKER_DIND
  services:
    - docker:dind
  only:
    - develop
    - tags
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $UI_IMAGE_TAG .
    - docker push $UI_IMAGE_TAG

# deploy vue to qa:

# deploy vue to prod:

# deploy dotnet to qa:

# deploy dotnet to prod:

# notify: