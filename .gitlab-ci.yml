# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

variables:
  API_IMAGE_TAG: $CI_REGISTRY/$CI_PROJECT_PATH/johnkiddjrcomapi:latest
  UI_IMAGE_TAG: $CI_REGISTRY/$CI_PROJECT_PATH/johnkiddjrcomui:latest

stages:
- build
- test
- publish
- containerize
- deploy
- notify

build dotnet:
  stage: build
  image: $DOTNET_BUILD
  script:
    - dotnet restore
    - dotnet build -c Release --no-restore

build vue:
  stage: build
  image: $NODE_BUILD
  script:
    - cd ui
    - npm ci
    - npm run build

generate version:
  stage: build
  image: $UBUNTU_IMAGE
  only:
    - develop
    - tags
  artifacts:
    paths:
      - vars/
    expire_in: 1 day
  script:
    - 

dotnet test:
  stage: test
  image: $DOTNET_BUILD
  script:
    - dotnet restore
    - dotnet test -v n --no-restore

sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml

publish vue for qa:
  stage: publish
  image: $NODE_BUILD
  only:
    - develop
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  script:
    - cd ui
    - npm ci
    # do variable replacements here
    - npm run build
    - mv dist ..

publish vue for prod:
  stage: publish
  image: $NODE_BUILD
  only:
    - tags
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  script:
    - cd ui
    - npm ci
    # do variable replacements here
    - npm run build

publish dotnet for qa:
  stage: publish
  image: $DOTNET_BUILD
  only:
    - develop
  artifacts:
    paths:
      - publish/
    expire_in: 1 week
  script:
    # do appsettings replacements here
    - dotnet restore
    - dotnet publish -c Release -o ./publish $PROJECT_CSPROJ --no-restore

publish dotnet for prod:
  stage: publish
  image: $DOTNET_BUILD
  only:
    - tags
  artifacts:
    paths:
      - publish/
    expire_in: 1 week
  script:
    # do appsettings replacements here
    - dotnet restore
    - dotnet publish -c Release -o ./publish $PROJECT_CSPROJ --no-restore

containerize dotnet:
  stage: containerize
  image: $DOCKER_IMAGE
  services:
    - docker:dind
  only:
    - develop
    - tags
  script:
    - mv Dockerfile.api Dockerfile
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $API_IMAGE_TAG .
    - docker push $API_IMAGE_TAG

containerize vue:
  stage: containerize
  image: $DOCKER_IMAGE
  services:
    - docker:dind
  only:
    - develop
    - tags
  script:
    - mv Dockerfile.ui Dockerfile
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $UI_IMAGE_TAG .
    - docker push $UI_IMAGE_TAG

deploy to qa:
  stage: deploy
  image: $DOCKER_IMAGE
  services:
    - docker:dind
  only:
    - develop
  before_script:
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | base64 -d | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa $DESTINATION_HOST >> ~/.ssh/known_hosts
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $UI_IMAGE_TAG
    - docker pull $API_IMAGE_TAG
    - docker container rm -f $UI_STAGE_CONTAINER_NAME > /dev/null 2>&1
    - docker container rm -f $API_STAGE_CONTAINER_NAME > /dev/null 2>&1
    - docker run -p $UI_STAGE_DOCKER_PORT:80 --name $UI_STAGE_CONTAINER_NAME -d $UI_IMAGE_TAG
    - docker run -p $API_STAGE_DOCKER_PORT:5000 --name $API_STAGE_CONTAINER_NAME -d $API_IMAGE_TAG

deploy to prod:
  stage: deploy
  image: $DOCKER_IMAGE
  services:
    - docker:dind
  only:
    - tags
  before_script:
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY}" | base64 -d | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa $DESTINATION_HOST >> ~/.ssh/known_hosts
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $UI_IMAGE_TAG
    - docker pull $API_IMAGE_TAG
    - docker container rm -f $UI_CONTAINER_NAME > /dev/null 2>&1
    - docker container rm -f $API_CONTAINER_NAME > /dev/null 2>&1
    - docker run -p $UI_DOCKER_PORT:80 --name $UI_CONTAINER_NAME -d $UI_IMAGE_TAG
    - docker run -p $API_DOCKER_PORT:5000 --name $API_CONTAINER_NAME -d $API_IMAGE_TAG

notify discord success:
  stage: notify
  image: $UBUNTU_IMAGE
  script:
    - apt update && apt install git curl wget -y
    - wget https://raw.githubusercontent.com/DiscordHooks/gitlab-ci-discord-webhook/master/send.sh
    - chmod +x send.sh
    - /bin/bash ./send.sh success $WEBHOOK_URL
  when: on_success

notify discord failure:
  stage: notify
  image: $UBUNTU_IMAGE
  script:
    - apt update && apt install git curl wget -y
    - wget https://raw.githubusercontent.com/DiscordHooks/gitlab-ci-discord-webhook/master/send.sh
    - chmod +x send.sh
    - /bin/bash ./send.sh failure $WEBHOOK_URL
  when: on_failure